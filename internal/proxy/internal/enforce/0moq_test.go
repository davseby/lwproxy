// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package enforce

import (
	"context"
	"sync"
)

// Ensure, that DBMock does implement DB.
// If this is not the case, regenerate this file with moq.
var _ DB = &DBMock{}

// DBMock is a mock implementation of DB.
//
//	func TestSomethingThatUsesDB(t *testing.T) {
//
//		// make and configure a mocked DB
//		mockedDB := &DBMock{
//			FetchBytesFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the FetchBytes method")
//			},
//			IncreaseBytesFunc: func(ctx context.Context, usedBytes int64) error {
//				panic("mock out the IncreaseBytes method")
//			},
//		}
//
//		// use mockedDB in code that requires DB
//		// and then make assertions.
//
//	}
type DBMock struct {
	// FetchBytesFunc mocks the FetchBytes method.
	FetchBytesFunc func(ctx context.Context) (int64, error)

	// IncreaseBytesFunc mocks the IncreaseBytes method.
	IncreaseBytesFunc func(ctx context.Context, usedBytes int64) error

	// calls tracks calls to the methods.
	calls struct {
		// FetchBytes holds details about calls to the FetchBytes method.
		FetchBytes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IncreaseBytes holds details about calls to the IncreaseBytes method.
		IncreaseBytes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UsedBytes is the usedBytes argument value.
			UsedBytes int64
		}
	}
	lockFetchBytes    sync.RWMutex
	lockIncreaseBytes sync.RWMutex
}

// FetchBytes calls FetchBytesFunc.
func (mock *DBMock) FetchBytes(ctx context.Context) (int64, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchBytes.Lock()
	mock.calls.FetchBytes = append(mock.calls.FetchBytes, callInfo)
	mock.lockFetchBytes.Unlock()
	if mock.FetchBytesFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.FetchBytesFunc(ctx)
}

// FetchBytesCalls gets all the calls that were made to FetchBytes.
// Check the length with:
//
//	len(mockedDB.FetchBytesCalls())
func (mock *DBMock) FetchBytesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchBytes.RLock()
	calls = mock.calls.FetchBytes
	mock.lockFetchBytes.RUnlock()
	return calls
}

// IncreaseBytes calls IncreaseBytesFunc.
func (mock *DBMock) IncreaseBytes(ctx context.Context, usedBytes int64) error {
	callInfo := struct {
		Ctx       context.Context
		UsedBytes int64
	}{
		Ctx:       ctx,
		UsedBytes: usedBytes,
	}
	mock.lockIncreaseBytes.Lock()
	mock.calls.IncreaseBytes = append(mock.calls.IncreaseBytes, callInfo)
	mock.lockIncreaseBytes.Unlock()
	if mock.IncreaseBytesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.IncreaseBytesFunc(ctx, usedBytes)
}

// IncreaseBytesCalls gets all the calls that were made to IncreaseBytes.
// Check the length with:
//
//	len(mockedDB.IncreaseBytesCalls())
func (mock *DBMock) IncreaseBytesCalls() []struct {
	Ctx       context.Context
	UsedBytes int64
} {
	var calls []struct {
		Ctx       context.Context
		UsedBytes int64
	}
	mock.lockIncreaseBytes.RLock()
	calls = mock.calls.IncreaseBytes
	mock.lockIncreaseBytes.RUnlock()
	return calls
}
